@model IEnumerable<VolunteeringPlatformApp.Common.Models.LogEntry>

@{
    ViewData["Title"] = "System Logs";
}

<h1>System Logs</h1>

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Log Entries</h5>
    </div>
    <div class="card-body p-0">
        @if (Model != null && Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Timestamp</th>
                            <th>Level</th>
                            <th>Message</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var log in Model)
                        {
                            <tr>
                                <td class="text-nowrap">
                                    @log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")
                                </td>
                                <td>
                                    <span class="badge @GetLevelBadgeClass(log.Level)">@log.Level</span>
                                </td>
                                <td>
                                    @if (log.Message != null && log.Message.Length > 80)
                                    {
                                        <span>@log.Message.Substring(0, 80)...</span>
                                    }
                                    else
                                    {
                                        <span>@log.Message</span>
                                    }
                                </td>
                                <td>
                                    <a href="@Url.Action("Details", new { id = log.Id })" class="btn btn-sm btn-outline-primary">
                                        View Details
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Simple Pagination -->
            @if (ViewBag.TotalPages > 1)
            {
                <div class="card-footer">
                    <nav aria-label="Log pagination">
                        <ul class="pagination justify-content-center mb-0">
                            @if (ViewBag.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.CurrentPage - 1 })">Previous</a>
                                </li>
                            }

                            @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
                            {
                                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                </li>
                            }

                            @if (ViewBag.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.CurrentPage + 1 })">Next</a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            }
        }
        else
        {
            <div class="text-center py-5">
                <h5 class="text-muted">No logs found</h5>
            </div>
        }
    </div>
</div>

@functions {
    private string GetLevelBadgeClass(string level)
    {
        return level?.ToLower() switch
        {
            "error" => "bg-danger",
            "critical" => "bg-dark",
            "warning" => "bg-warning text-dark",
            "information" => "bg-info",
            "debug" => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }
} 